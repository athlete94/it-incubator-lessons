{"version":3,"sources":["components/AddItemForm/AddItemForm.module.css","components/DeleteButton/DeleteButton.module.css","serviceWorker.ts","API/todolistApi.ts","utils/error-utils.ts","state/todolists-reducer.ts","state/authReducer.ts","state/app-reducer.ts","state/tasksReducer.ts","state/store.ts","state/hooks.ts","components/Header/Header.tsx","components/AddItemForm/AddItemForm.tsx","components/EditableSpan/EditableSpan.tsx","components/CheckBox/CheckBox.tsx","components/DeleteButton/DeleteButton.tsx","components/Task/Task.tsx","components/Todolist/TodoList.tsx","components/Main/Main.tsx","components/Error/ErrorSnackbar.tsx","components/Login/Login.tsx","App.tsx","index.tsx","components/Task/Task.module.css","components/Todolist/Todolist.module.css","components/Header/Header.module.css","components/EditableSpan/EditableSpan.module.css"],"names":["module","exports","Boolean","window","location","hostname","match","TaskStatuses","TaskPriorities","instance","axios","create","baseURL","withCredentials","headers","todolistApi","get","title","post","todolistId","put","delete","taskId","model","authApi","data","handleServerNetworkError","dispatch","message","setOpen","appSetStatus","handleServerAppError","messages","length","initialState","setIsLoggedIn","isLoggedIn","type","status","error","id","login","email","isInitialized","isInitializedTC","then","res","resultCode","userData","catch","err","setDisabledDelTask","disabled","setTasksTC","tasks","setTasks","items","updateTaskTC","getState","task","tasksReducer","find","t","taskApi","description","completed","priority","startDate","deadline","updateTask","console","warn","rootReducers","combineReducers","state","action","map","filter","el","todoListId","todolist","stateCopy","todolists","forEach","todolistsReducer","entityStatus","newTodolist","addedDate","order","tl","appReducer","authReducer","store","createStore","applyMiddleware","thunk","useAppDispatch","useDispatch","useAppSelector","useSelector","Header","className","s","header","header_content","Button","variant","color","onClick","AddItemForm","React","memo","props","useState","setTitle","setError","addTask","newTitle","trim","callBack","addItemForm","value","onChange","e","currentTarget","onKeyPress","charCode","placeholder","onFocus","EditableSpan","callback","edit","setEdit","titleList","setTitleList","onBlurHandler","editableSpan","span","onDoubleClick","onBlur","autoFocus","CheckBox","checkedValue","checked","DeleteButton","restProps","deleteButton","Tasks","deleteTask","changeStatus","updateTaskTitleHandler","onChangeHandler","useCallback","newStatus","Completed","New","onTitleChangeHandler","time","slice","date","log","taskBlock","dateTime","Todolist","removeTask","changeFilter","changeTaskStatus","removeTodolist","updateTodolistTitle","updateTaskTitle","onAllClickHandler","onActiveClickHandler","onCompletedClickHandler","addTaskHandler","updateTodolistTitleHandler","allTodolistTasks","style","display","justifyContent","Task","filters","Main","useEffect","todos","removeTaskAC","deleteTaskTC","item","createTaskTC","addTodolist","addTodolistTC","removeTodoListAC","changeTodolistTitleAC","updateTodolistTC","tasksForTodolist","to","Alert","ref","elevation","CustomizedSnackbars","handleClose","event","reason","Stack","spacing","sx","width","Snackbar","open","autoHideDuration","onClose","severity","Login","formik","useFormik","initialValues","password","rememberMe","onSubmit","values","resetForm","validate","errors","Grid","container","handleSubmit","FormControl","FormLabel","href","target","FormGroup","TextField","label","margin","getFieldProps","touched","FormControlLabel","control","Checkbox","App","LinearProgress","wrap","path","element","textAlign","position","top","CircularProgress","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.13ea881a.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"addItemForm\":\"AddItemForm_addItemForm__27gm1\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"deleteButton\":\"DeleteButton_deleteButton__R2DRX\"};","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. Main is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import axios, { AxiosResponse } from 'axios'\r\n// todolists types\r\nexport type TodolistApiType = {\r\n    id: string\r\n    addedDate: string\r\n    order: number\r\n    title: string\r\n}\r\n\r\nexport type ResponseType<T = {}> = {\r\n    resultCode: number\r\n    messages: string[]\r\n    data: T\r\n}\r\n\r\n// tasks types\r\n\r\nexport type TaskApiType = {\r\n    description: string\r\n    title: string\r\n    completed: boolean\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n    id: string\r\n    todoListId: string\r\n    order: number\r\n    addedDate: string\r\n}\r\n\r\nexport type GetTasksType = {\r\n    items: TaskApiType[],\r\n    totalCount: number,\r\n    error: string | null,\r\n}\r\n\r\nexport type TaskUpdateType = {\r\n    title: string\r\n    description: string\r\n    completed: boolean\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n}\r\n\r\nexport enum TaskStatuses {\r\n    New = 0,\r\n    InProgress = 1,\r\n    Completed = 2,\r\n    Draft = 3\r\n}\r\n\r\nexport enum TaskPriorities {\r\n    Low =0,\r\n    Middle= 1,\r\n    High = 2,\r\n    Urgently = 3,\r\n    Later = 4\r\n}\r\n\r\n// auth type\r\n\r\nexport type LoginRequestType = {\r\n    email: string,\r\n    password: string,\r\n    rememberMe: boolean,\r\n    captcha?: string,\r\n}\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': 'a1cb2198-6145-426b-aef5-83678121f4d6',\r\n    }\r\n})\r\n\r\nexport const todolistApi = {\r\n    getTodolists() {\r\n        return instance.get<TodolistApiType[]>('todo-lists')\r\n    },\r\n    createTodolist(title: string) {\r\n        return instance.post<{title: string}, AxiosResponse<ResponseType<{item: TodolistApiType}>>>('todo-lists', {title})\r\n    },\r\n    updateTodolist(todolistId: string, title: string) {\r\n        return instance.put<{title: string}, AxiosResponse<ResponseType>>(`todo-lists/${todolistId}`, {title})\r\n    },\r\n    deleteTodolist(todolistId: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${todolistId}`)\r\n    },\r\n    getTasks(todolistId: string) {\r\n        return instance.get<GetTasksType>(`todo-lists/${todolistId}/tasks`)\r\n    },\r\n    createTask(todolistId: string, title: string) {\r\n        return instance.post<{title: string}, AxiosResponse<ResponseType<{item: TaskApiType}>>>(`todo-lists/${todolistId}/tasks`, {title})\r\n    },\r\n    deleteTask(todolistId: string, taskId: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${todolistId}/tasks/${taskId}`)\r\n    },\r\n    updateTask(todolistId: string, taskId: string, model: TaskUpdateType) {\r\n        return instance.put<TaskUpdateType, AxiosResponse<ResponseType<{item: TaskApiType}>>>(`todo-lists/${todolistId}/tasks/${taskId}`, model)\r\n    }\r\n}\r\n\r\nexport const authApi =  {\r\n    login(data: LoginRequestType) {\r\n        return instance.post<ResponseType<{userId: number}>>('auth/login', data)\r\n    },\r\n    logout() {\r\n        return instance.delete<ResponseType>('auth/login')\r\n    },\r\n    me() {\r\n        return instance.get<ResponseType<{id: number, email: string, login: string}>>('auth/me')\r\n    }\r\n}","import {Dispatch} from \"redux\";\r\nimport {appSetStatus, setOpen} from \"../state/app-reducer\";\r\nimport {ResponseType} from \"../API/todolistApi\";\r\n\r\nexport const handleServerNetworkError = (dispatch: Dispatch, message: string) => {\r\n    dispatch(setOpen(message))\r\n    dispatch(appSetStatus('failed'))\r\n}\r\n\r\nexport const handleServerAppError = <T>(data: ResponseType<T>, dispatch: Dispatch) => {\r\n    if (data.messages.length) {\r\n        dispatch(setOpen(data.messages[0]))\r\n    } else {\r\n        dispatch(setOpen('Some error ocured'))\r\n    }\r\n    dispatch(appSetStatus('failed'))\r\n}","import {FilterValuesType} from \"../components/Main/Main\";\r\nimport {todolistApi, TodolistApiType} from \"../API/todolistApi\";\r\nimport {AppActionsType, appSetStatus, RequestStatusType} from \"./app-reducer\";\r\nimport {AxiosError} from \"axios\";\r\nimport {handleServerAppError, handleServerNetworkError} from \"../utils/error-utils\";\r\nimport {AppThunk} from \"./store\";\r\nimport {setTasksTC} from \"./tasksReducer\";\r\n\r\nexport type TodolistType = TodolistApiType & {\r\n    filter: FilterValuesType,\r\n    entityStatus: RequestStatusType\r\n}\r\n\r\nconst initialState: Array<TodolistType> = []\r\n\r\n\r\nexport const todolistsReducer = (state: Array<TodolistType> = initialState, action: todolistsReducerActionType): Array<TodolistType> => {\r\n    switch (action.type) {\r\n        case 'SET-TODOLISTS':\r\n            return action.todolists.map(t => ({...t, filter: 'all', entityStatus: 'idle'}))\r\n        case 'REMOVE-TODOLIST':\r\n            return state.filter(el => el.id !== action.id)\r\n        case 'ADD-TODOLIST':\r\n            let newTodolist: TodolistType = {\r\n                id: action.todolist.id,\r\n                addedDate: action.todolist.addedDate,\r\n                order: action.todolist.order,\r\n                title: action.todolist.title,\r\n                filter: 'all',\r\n                entityStatus: 'idle',\r\n            }\r\n            return [newTodolist, ...state]\r\n        case 'CHANGE-TODOLIST-TITLE':\r\n            return state.map(el => el.id === action.id ? {...el, title: action.title} : el)\r\n        case 'CHANGE-TODOLIST-FILTER':\r\n            return state.map(el => el.id === action.id ? {...el, filter: action.filter} : el)\r\n        case 'SET_ENTITY_STATUS':\r\n            return state.map(tl => tl.id === action.id ? {...tl, entityStatus: action.entityStatus} : tl)\r\n        case 'CLEAR_DATA':\r\n            return []\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport type todolistsReducerActionType =\r\n    RemovetodolistACType\r\n    | AddTodolistACType\r\n    | changeTodolistTitleACType\r\n    | changeTodolistFilterACType\r\n    | SetTodoListsType\r\n    | AppActionsType\r\n    | SetEntityStatusType\r\n    | SetDisabledBtnType\r\n    | ClearDataType\r\n\r\n\r\n// action creators\r\n\r\nexport type SetTodoListsType = ReturnType<typeof setTodoLists>\r\nexport const setTodoLists = (todolists: TodolistApiType[]) => {\r\n    return {\r\n        type: 'SET-TODOLISTS',\r\n        todolists\r\n    } as const\r\n}\r\n\r\nexport type RemovetodolistACType = ReturnType<typeof removeTodoListAC>\r\nexport const removeTodoListAC = (id: string) => {\r\n    return {\r\n        type: 'REMOVE-TODOLIST',\r\n        id\r\n    } as const\r\n}\r\nexport type AddTodolistACType = ReturnType<typeof addTodoListAC>\r\nexport const addTodoListAC = (todolist: TodolistApiType) => {\r\n    return {\r\n        type: 'ADD-TODOLIST',\r\n        todolist\r\n    } as const\r\n}\r\ntype changeTodolistTitleACType = ReturnType<typeof changeTodolistTitleAC>\r\nexport const changeTodolistTitleAC = (id: string, title: string) => {\r\n    return {\r\n        type: 'CHANGE-TODOLIST-TITLE',\r\n        id,\r\n        title\r\n    } as const\r\n}\r\nexport type changeTodolistFilterACType = ReturnType<typeof changeTodolistFilterAC>\r\nexport const changeTodolistFilterAC = (id: string, filter: FilterValuesType) => {\r\n    return {\r\n        type: 'CHANGE-TODOLIST-FILTER',\r\n        id,\r\n        filter\r\n    } as const\r\n}\r\n\r\nexport type SetEntityStatusType = ReturnType<typeof setEntityStatus>\r\nexport const setEntityStatus = (id: string, entityStatus: RequestStatusType) => {\r\n    return {\r\n        type: 'SET_ENTITY_STATUS',\r\n        entityStatus,\r\n        id\r\n    } as const\r\n}\r\n\r\nexport type SetDisabledBtnType = ReturnType<typeof setDisabledBtn>\r\nexport const setDisabledBtn = (disabled: boolean) => {\r\n    return {\r\n        type: 'SET_DISABLED_ADD_BTN',\r\n        disabled,\r\n    } as const\r\n}\r\n\r\nexport type ClearDataType = ReturnType<typeof clearData>\r\nexport const clearData = () => {\r\n    return {\r\n        type: 'CLEAR_DATA'\r\n    } as const\r\n}\r\n\r\n\r\n//thunk creators\r\n\r\nexport const setTodolistTC = (): AppThunk => dispatch => {\r\n    dispatch(appSetStatus('loading'))\r\n    todolistApi.getTodolists()\r\n        .then(res => {\r\n            dispatch(setTodoLists(res.data))\r\n            dispatch(appSetStatus('successed'))\r\n            return res.data\r\n        })\r\n        .then((todos) => {\r\n            todos.forEach(tl => {\r\n                dispatch(setTasksTC(tl.id)) // сетаем такси только после загрузкки тудулистов\r\n            })\r\n        })\r\n        .catch((err: AxiosError) => {\r\n            handleServerNetworkError(dispatch, err.message)\r\n        })\r\n\r\n\r\n}\r\n\r\nexport const addTodolistTC = (title: string): AppThunk => dispatch => {\r\n    dispatch(appSetStatus('loading'))\r\n    todolistApi.createTodolist(title)\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(addTodoListAC(res.data.data.item))\r\n                dispatch(appSetStatus('successed'))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch)\r\n            }\r\n        })\r\n        .catch((err: AxiosError) => {\r\n            handleServerNetworkError(dispatch, err.message)\r\n        })\r\n\r\n}\r\n\r\nexport const deleteTodolistTC = (todolistId: string): AppThunk => dispatch => {\r\n    dispatch(appSetStatus('loading'))\r\n    dispatch(setEntityStatus(todolistId, 'loading'))\r\n    todolistApi.deleteTodolist(todolistId)\r\n        .then((res) => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(appSetStatus('successed'))\r\n                dispatch(removeTodoListAC(todolistId))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch)\r\n            }\r\n        })\r\n        .catch((err: AxiosError) => {\r\n            handleServerNetworkError(dispatch, err.message)\r\n        })\r\n\r\n}\r\nexport const updateTodolistTC = (todolistId: string, title: string): AppThunk => dispatch => {\r\n    dispatch(appSetStatus('loading'))\r\n    todolistApi.updateTodolist(todolistId, title)\r\n        .then((res) => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(appSetStatus('successed'))\r\n                dispatch(changeTodolistTitleAC(todolistId, title))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch)\r\n            }\r\n        })\r\n        .catch((err: AxiosError) => {\r\n            handleServerNetworkError(dispatch, err.message)\r\n        })\r\n}","import {authApi, LoginRequestType} from \"../API/todolistApi\";\r\nimport {appSetStatus, isInitializedTC} from \"./app-reducer\";\r\nimport {AxiosError} from \"axios\";\r\nimport {handleServerAppError, handleServerNetworkError} from \"../utils/error-utils\";\r\nimport {AppThunk} from \"./store\";\r\nimport {clearData, ClearDataType} from \"./todolists-reducer\";\r\n\r\n\r\nexport type AuthReducerStateType = {\r\n    isLoggedIn: boolean,\r\n}\r\nconst initialState = {} as AuthReducerStateType\r\n\r\n\r\nexport const authReducer = (state: AuthReducerStateType = initialState, action: AuthReducerActionType): AuthReducerStateType  => {\r\n    switch (action.type) {\r\n        case 'SET_IS_LOGGED_IN':\r\n            return {\r\n                ...state,\r\n                isLoggedIn: action.isLoggedIn\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport type AuthReducerActionType = SetIsLoggedInType | ClearDataType\r\n\r\n\r\n// action creators\r\n\r\n\r\nexport type SetIsLoggedInType = ReturnType <typeof setIsLoggedIn>\r\nexport const setIsLoggedIn = (isLoggedIn: boolean) => {\r\n    return {\r\n        type: 'SET_IS_LOGGED_IN',\r\n        isLoggedIn\r\n    }as const\r\n}\r\n\r\n\r\n//thunk creators\r\n\r\nexport const loginTC = (data: LoginRequestType): AppThunk => dispatch => {\r\n    dispatch(appSetStatus('loading'))\r\n    authApi.login(data)\r\n        .then(res => {\r\n            if(res.data.resultCode === 0) {\r\n                dispatch(isInitializedTC())\r\n                dispatch(setIsLoggedIn(true))\r\n                dispatch(appSetStatus('successed'))\r\n            }\r\n            else {\r\n                handleServerAppError(res.data, dispatch)\r\n            }\r\n        })\r\n        .catch((err: AxiosError) => {\r\n            handleServerNetworkError(dispatch, err.message)\r\n        })\r\n}\r\n\r\nexport const logoutTC = (): AppThunk => dispatch => {\r\n    dispatch(appSetStatus('loading'))\r\n    authApi.logout()\r\n        .then(res => {\r\n            if(res.data.resultCode === 0) {\r\n                dispatch(setIsLoggedIn(false))\r\n                dispatch(appSetStatus('successed'))\r\n                dispatch(clearData())\r\n            }\r\n            else {\r\n                handleServerAppError(res.data, dispatch)\r\n            }\r\n        })\r\n        .catch((err: AxiosError) => {\r\n            handleServerNetworkError(dispatch, err.message)\r\n        })\r\n}\r\n\r\n\r\n","import {authApi} from \"../API/todolistApi\";\r\nimport {setIsLoggedIn} from \"./authReducer\";\r\nimport {AxiosError} from \"axios\";\r\nimport {handleServerAppError, handleServerNetworkError} from \"../utils/error-utils\";\r\nimport {AppThunk} from \"./store\";\r\n\r\nexport type RequestStatusType = 'idle' | 'loading' | 'successed' | 'failed'\r\n\r\n\r\ntype NulableType<T> = null | T\r\nexport type InitialStateType = typeof initialState\r\nlet initialState = {\r\n    status: 'idle' as RequestStatusType,\r\n    error: null as NulableType<string>,\r\n    id: null as null | number,\r\n    login: '',\r\n    email: '',\r\n    isInitialized: false,\r\n}\r\n\r\nexport const appReducer = (state: InitialStateType = initialState, action: AppActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'APP/SET-STATUS':\r\n            return {\r\n                ...state,\r\n                status: action.status\r\n            }\r\n        case 'APP/SET-ERROR':\r\n            return {\r\n                ...state,\r\n                error: action.error\r\n            }\r\n        case 'APP/SET-INITIALIZED':\r\n            return {\r\n                ...state,\r\n                isInitialized: action.isInitialized\r\n            }\r\n        case 'SET_USER_DATA':\r\n            return {\r\n                ...state,\r\n                ...action.userData\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n};\r\n\r\n\r\nexport type AppActionsType = AppSetStatusType | SetOpenType | SetIsInitializedType | SetUserDataType\r\n\r\nexport type AppSetStatusType = ReturnType<typeof appSetStatus>\r\nexport const appSetStatus = (status: RequestStatusType) => {\r\n    return {\r\n        type: 'APP/SET-STATUS',\r\n        status,\r\n    }as const\r\n}\r\n\r\nexport type SetOpenType = ReturnType<typeof setOpen>\r\nexport const setOpen = (error: NulableType<string>) => {\r\n    return {\r\n        type: 'APP/SET-ERROR',\r\n        error,\r\n    }as const\r\n}\r\n\r\nexport type SetIsInitializedType = ReturnType<typeof setIsInitialized>\r\nexport const setIsInitialized = (isInitialized: boolean) => {\r\n    return {\r\n        type: 'APP/SET-INITIALIZED',\r\n        isInitialized,\r\n    }as const\r\n}\r\n\r\nexport type SetUserDataType = ReturnType <typeof setUserData>\r\nexport const setUserData = (userData: {id: number, email: string, login: string}) => {\r\n    return {\r\n        type: 'SET_USER_DATA',\r\n        userData\r\n    }as const\r\n}\r\n\r\n//thunk\r\n\r\nexport const isInitializedTC = (): AppThunk => dispatch => {\r\n    authApi.me()\r\n        .then(res => {\r\n            if(res.data.resultCode === 0) {\r\n                dispatch(setIsLoggedIn(true))\r\n                dispatch(setUserData(res.data.data))\r\n            }\r\n            else {\r\n                handleServerAppError(res.data, dispatch)\r\n            }\r\n            dispatch(setIsInitialized(true))\r\n        })\r\n        .catch((err: AxiosError) => {\r\n            handleServerNetworkError(dispatch, err.message)\r\n        })\r\n}\r\n\r\n","import {TasksStateType} from \"../components/Main/Main\";\r\nimport {AddTodolistACType, ClearDataType, RemovetodolistACType, SetTodoListsType} from \"./todolists-reducer\";\r\nimport {Dispatch} from \"redux\";\r\nimport {TaskPriorities, TaskStatuses, TaskApiType, TaskUpdateType, todolistApi} from \"../API/todolistApi\";\r\nimport {AppThunk, RootState} from \"./store\";\r\nimport {AppActionsType, appSetStatus, RequestStatusType} from \"./app-reducer\";\r\nimport {AxiosError} from \"axios\";\r\nimport {handleServerAppError, handleServerNetworkError} from \"../utils/error-utils\";\r\n\r\n\r\nexport type TaskType = TaskApiType & { disabled: RequestStatusType }\r\nconst initialState: TasksStateType = {}\r\n\r\nexport type tasksReducerActionType =\r\n    removeTaskType |\r\n    addTaskType |\r\n    AddTodolistACType |\r\n    RemovetodolistACType\r\n    | SetTodoListsType\r\n    | SetTasksType\r\n    | UpdateTaskType\r\n    | AppActionsType\r\n    | SetDisabledDelTask\r\n    | ClearDataType\r\n\r\nexport const tasksReducer = (state: TasksStateType = initialState, action: tasksReducerActionType): TasksStateType => {\r\n    switch (action.type) {\r\n        case 'SET_TASKS':\r\n            return {\r\n                ...state,\r\n                [action.todolistId]: action.tasks.map(t => ({...t, disabled: 'idle'}))\r\n            }\r\n        case 'REMOVE-TASK':\r\n            return {...state, [action.todolistId]: state[action.todolistId].filter(el => el.id !== action.taskId)}\r\n        case 'ADD-TASK':\r\n            return {\r\n                ...state,\r\n                [action.task.todoListId]: [{...action.task, disabled: 'idle'}, ...state[action.task.todoListId]]\r\n            }\r\n        case 'UPDATE_TASK':\r\n            return {\r\n                ...state,\r\n                [action.todolistId]: state[action.todolistId].map(t => t.id === action.taskId ? {...t, ...action.model} : t)\r\n            }\r\n        case 'ADD-TODOLIST':\r\n            return {\r\n                ...state,\r\n                [action.todolist.id]: []\r\n            }\r\n        case 'SET-TODOLISTS':\r\n            let stateCopy = {...state}\r\n            action.todolists.forEach(t => {\r\n                stateCopy[t.id] = []\r\n            })\r\n            return stateCopy\r\n        case \"REMOVE-TODOLIST\":\r\n            delete state[action.id]\r\n            return {...state}\r\n        case 'SET_DISABLED_DEL_TASK':\r\n            return {\r\n                ...state,\r\n                [action.todolistId]: state[action.todolistId].map(t => t.id === action.taskId ? {\r\n                    ...t,\r\n                    disabled: action.disabled\r\n                } : t)\r\n            }\r\n        case 'CLEAR_DATA':\r\n            return {}\r\n        default:\r\n            return state\r\n    }\r\n};\r\n\r\n\r\n// action creators\r\ntype removeTaskType = ReturnType<typeof removeTaskAC>\r\nexport const removeTaskAC = (todolistId: string, taskId: string) => {\r\n    return {\r\n        type: 'REMOVE-TASK',\r\n        taskId,\r\n        todolistId\r\n    } as const\r\n}\r\n\r\ntype addTaskType = {\r\n    type: 'ADD-TASK'\r\n    task: TaskApiType\r\n}\r\nexport const addTaskAC = (task: TaskApiType): addTaskType => {\r\n    return {\r\n        type: 'ADD-TASK',\r\n        task,\r\n    } as const\r\n}\r\n\r\n\r\ntype UpdateTaskType = {\r\n    type: 'UPDATE_TASK'\r\n    taskId: string\r\n    todolistId: string\r\n    model: TaskUpdateModelType\r\n}\r\nexport const updateTask = (todolistId: string, taskId: string, model: TaskUpdateModelType): UpdateTaskType => {\r\n    return {\r\n        type: 'UPDATE_TASK',\r\n        taskId,\r\n        todolistId,\r\n        model\r\n    } as const\r\n}\r\n\r\ntype SetTasksType = ReturnType<typeof setTasks>\r\nexport const setTasks = (tasks: TaskApiType[], todolistId: string) => {\r\n    return {\r\n        type: 'SET_TASKS',\r\n        tasks,\r\n        todolistId\r\n    } as const\r\n}\r\n\r\n\r\nexport type SetDisabledDelTask = ReturnType<typeof setDisabledDelTask>\r\nexport const setDisabledDelTask = (todolistId: string, taskId: string, disabled: RequestStatusType) => {\r\n    return {\r\n        type: 'SET_DISABLED_DEL_TASK',\r\n        todolistId,\r\n        taskId,\r\n        disabled,\r\n    } as const\r\n}\r\n\r\n// thunk creators\r\n\r\nexport const setTasksTC = (todolistId: string): AppThunk => dispatch => {\r\n    dispatch(appSetStatus('loading'))\r\n    todolistApi.getTasks(todolistId)\r\n        .then(res => {\r\n            dispatch(setTasks(res.data.items, todolistId))\r\n            dispatch(appSetStatus('successed'))\r\n        })\r\n        .catch((err: AxiosError) => {\r\n            handleServerNetworkError(dispatch, err.message)\r\n        })\r\n\r\n}\r\n\r\nexport const createTaskTC = (todolistId: string, title: string): AppThunk => dispatch => {\r\n    dispatch(appSetStatus('loading'))\r\n    todolistApi.createTask(todolistId, title)\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(addTaskAC(res.data.data.item))\r\n                dispatch(appSetStatus('successed'))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch)\r\n            }\r\n        })\r\n        .catch((err: AxiosError) => {\r\n            handleServerNetworkError(dispatch, err.message)\r\n        })\r\n\r\n}\r\n\r\nexport const deleteTaskTC = (todolistId: string, taskId: string): AppThunk => dispatch => {\r\n    dispatch(appSetStatus('loading'))// крутилка\r\n    dispatch(setDisabledDelTask(todolistId, taskId, 'loading'))// кнопка удаления\r\n    todolistApi.deleteTask(todolistId, taskId)\r\n        .then((res) => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(setDisabledDelTask(todolistId, taskId, 'successed'))// кнопка удаления\r\n                dispatch(removeTaskAC(todolistId, taskId))\r\n                dispatch(appSetStatus('successed'))// крутилка\r\n            } else {\r\n                handleServerAppError(res.data, dispatch)\r\n            }\r\n        })\r\n        .catch((err: AxiosError) => {\r\n            handleServerNetworkError(dispatch, err.message)\r\n        })\r\n\r\n}\r\n\r\n\r\nexport type TaskUpdateModelType = {\r\n    title?: string\r\n    description?: string\r\n    completed?: boolean\r\n    status?: TaskStatuses\r\n    priority?: TaskPriorities\r\n    startDate?: string\r\n    deadline?: string\r\n}\r\n\r\nexport const updateTaskTC = (todolistId: string, taskId: string, model: TaskUpdateModelType): AppThunk =>\r\n    (dispatch: Dispatch, getState: () => RootState) => {\r\n\r\n\r\n        const state = getState()\r\n        let task = state.tasksReducer[todolistId].find(t => t.id === taskId)\r\n        if (!task) {\r\n            //throw new Error(\"task not found in the state\");\r\n            console.warn('task not found in the state')\r\n            return\r\n        }\r\n\r\n        let taskApi: TaskUpdateType = {\r\n            title: task.title,\r\n            description: task.description,\r\n            completed: task.completed,\r\n            status: task.status,\r\n            priority: task.priority,\r\n            startDate: task.startDate,\r\n            deadline: task.deadline,\r\n            ...model\r\n        }\r\n\r\n        dispatch(appSetStatus('loading'))\r\n        todolistApi.updateTask(todolistId, taskId, taskApi)\r\n            .then((res) => {\r\n                if (res.data.resultCode === 0) {\r\n                    dispatch(appSetStatus('successed'))\r\n                    dispatch(updateTask(todolistId, taskId, model))\r\n                } else {\r\n                    handleServerAppError(res.data, dispatch)\r\n                }\r\n            })\r\n            .catch((err: AxiosError) => {\r\n                handleServerNetworkError(dispatch, err.message)\r\n            })\r\n    }\r\n\r\n","import {applyMiddleware, combineReducers} from \"redux\";\r\nimport {tasksReducer, tasksReducerActionType} from \"./tasksReducer\";\r\nimport {todolistsReducer, todolistsReducerActionType} from \"./todolists-reducer\";\r\nimport thunk, {ThunkAction, ThunkDispatch} from \"redux-thunk\";\r\nimport {AppActionsType, appReducer} from \"./app-reducer\";\r\nimport {authReducer, AuthReducerActionType} from \"./authReducer\";\r\nimport { legacy_createStore as createStore} from 'redux'\r\n\r\n\r\nconst rootReducers = combineReducers({\r\n        tasksReducer,\r\n        todolistsReducer,\r\n        appReducer,\r\n        authReducer\r\n    }\r\n)\r\n\r\nexport const store = createStore(rootReducers, applyMiddleware(thunk))\r\nexport type RootState = ReturnType<typeof store.getState>\r\nexport type AppDispatch = ThunkDispatch<RootState, unknown, AppActionType>\r\n\r\n\r\nexport type AppActionType = AppActionsType | AuthReducerActionType | tasksReducerActionType | todolistsReducerActionType\r\n\r\nexport type AppThunk<ReturnType = void> = ThunkAction<\r\n    ReturnType,\r\n    RootState,\r\n    unknown,\r\n    AppActionType>\r\n\r\n\r\n// @ts-ignore\r\nwindow.store = store;\r\n\r\n","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux'\r\nimport type { RootState, AppDispatch } from './store'\r\n\r\n// Use throughout your app instead of plain `useDispatch` and `useSelector`\r\nexport const useAppDispatch = () => useDispatch<AppDispatch>()\r\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector","import React from 'react';\r\nimport s from './Header.module.css'\r\nimport Button from '@mui/material/Button'\r\nimport { logoutTC} from \"../../state/authReducer\";\r\nimport {useAppDispatch, useAppSelector} from \"../../state/hooks\";\r\n\r\nconst Header = () => {\r\n    let isLoggedIn = useAppSelector(state => state.authReducer.isLoggedIn)\r\n    let login = useAppSelector(state =>  state.appReducer.login)\r\n    const dispatch = useAppDispatch()\r\n\r\n    const logoutHandler = () => {\r\n        dispatch(logoutTC())\r\n    }\r\n\r\n    return (\r\n        <div className={s.header}>\r\n            {isLoggedIn &&\r\n                <div className={s.header_content}>\r\n                    <div>Hello {login}</div>\r\n                    <Button variant=\"contained\" color=\"secondary\" onClick={logoutHandler}>Logout</Button>\r\n                </div>\r\n            }\r\n\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Header;","import React, {ChangeEvent, KeyboardEvent, useCallback, useState} from 'react';\r\nimport s from './AddItemForm.module.css'\r\nimport {setOpen} from \"../../state/app-reducer\";\r\nimport {useDispatch} from \"react-redux\";\r\n\r\ntype AddItemFormTypeProps={\r\n    callBack:(title:string)=>void,\r\n    placeholder?: string\r\n    disabled?: boolean\r\n    //todolistID:string\r\n}\r\n\r\nexport const AddItemForm = React.memo((props:AddItemFormTypeProps) => {\r\n    let [title, setTitle] = useState(\"\")\r\n    let [error, setError] = useState<string | null>(null)\r\n\r\n    const addTask = () => {\r\n        let newTitle = title.trim();\r\n        if (newTitle !== \"\") {\r\n            props.callBack(newTitle);\r\n            setTitle('')\r\n        } else {\r\n            setError(\"Title is required\");\r\n        }\r\n    }\r\n\r\n    const onFocusHandler = () => {\r\n        setError('')\r\n    }\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if(error !== null) setError(null);\r\n        if (e.charCode === 13) {\r\n            addTask();\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div className={s.addItemForm}>\r\n                <div>\r\n                    <input value={title}\r\n                           onChange={onChangeHandler}\r\n                           onKeyPress={onKeyPressHandler}\r\n                           className={error ? \"error\" : \"\"}\r\n                           placeholder={props.placeholder}\r\n                           onFocus={onFocusHandler}\r\n                           disabled={props.disabled}\r\n                    />\r\n                </div>\r\n                <div>\r\n                    <button onClick={addTask} disabled={props.disabled}>add</button>\r\n                </div>\r\n\r\n            </div>\r\n            {error && <div className=\"error-message\">{error}</div>}\r\n\r\n        </div>\r\n\r\n    );\r\n});\r\n\r\n","import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\nimport s from \"./EditableSpan.module.css\"\r\n\r\ntype EditableSpanPropsType = {\r\n    title: string\r\n    callback: (title: string) => void\r\n}\r\n\r\nexport const EditableSpan = React.memo(({title, callback}: EditableSpanPropsType) => {\r\n\r\n    const [edit, setEdit] = useState(true)\r\n    const [titleList, setTitleList] = useState(title)\r\n\r\n    const onDoubleClickHandler = () => {\r\n        setEdit(false)\r\n    }\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if(e.charCode === 13) {\r\n            onBlurHandler()\r\n        }\r\n    }\r\n    const onBlurHandler = () => {\r\n        callback(titleList)\r\n        setEdit(true)\r\n    }\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitleList(e.currentTarget.value)\r\n    }\r\n\r\n    return (\r\n        <div className={s.editableSpan}>\r\n            {edit ?\r\n                <div className={s.span}><span onDoubleClick={onDoubleClickHandler}>{title}</span></div>\r\n                 :\r\n                <input onBlur={onBlurHandler}\r\n                       onKeyPress={onKeyPressHandler}\r\n                       autoFocus\r\n                       value={titleList}\r\n                       onChange={onChangeHandler}/>}\r\n        </div>\r\n    );\r\n})\r\n","import React from 'react';\r\n\r\n\r\ntype CheckBoxPropsType = {\r\n    callback: (e: boolean) => void\r\n    checkedValue: boolean\r\n}\r\n\r\n\r\n\r\nexport const CheckBox = React.memo(({callback, checkedValue}: CheckBoxPropsType) => {\r\n\r\n    return (\r\n        <div>\r\n            <input type=\"checkbox\" onChange={(e) => callback(e.currentTarget.checked)} checked={checkedValue}/>\r\n        </div>\r\n    );\r\n})","import React, {ButtonHTMLAttributes, DetailedHTMLProps} from 'react'\r\nimport s from './DeleteButton.module.css'\r\n\r\ntype DefaultButtonPropsType = DetailedHTMLProps<ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement>\r\n\r\n\r\ntype DeleteButtonType = DefaultButtonPropsType\r\n\r\nexport const    DeleteButton = ({...restProps}: DeleteButtonType) => {\r\n\r\n\r\n    return <div className={s.deleteButton}>\r\n        <button {...restProps}/>\r\n    </div>\r\n\r\n}","import React, {useCallback} from \"react\";\r\nimport {EditableSpan} from \"../EditableSpan/EditableSpan\";\r\nimport {CheckBox} from \"../CheckBox/CheckBox\"\r\nimport {TaskStatuses} from \"../../API/todolistApi\";\r\nimport s from './Task.module.css'\r\nimport {DeleteButton} from \"../DeleteButton/DeleteButton\";\r\nimport {RequestStatusType} from \"../../state/app-reducer\";\r\n\r\n\r\ntype TasksPropsType = {\r\n    id: string\r\n    title: string\r\n    status: TaskStatuses\r\n    addedDate: string\r\n    disabled: RequestStatusType\r\n    changeStatus: (id: string, status: TaskStatuses) => void,\r\n    deleteTask: (taskId: string) => void,\r\n    updateTaskTitleHandler: (title: string, taskId: string) => void\r\n}\r\n\r\n\r\nconst Tasks = React.memo(({\r\n                              id,\r\n                              title,\r\n                              status,\r\n                              addedDate,\r\n                              deleteTask,\r\n                              changeStatus,\r\n                              updateTaskTitleHandler,\r\n                              disabled\r\n                          }: TasksPropsType) => {\r\n\r\n    const onClickHandler = () => {\r\n        deleteTask(id)\r\n    }\r\n\r\n    const onChangeHandler = useCallback((e: boolean) => {\r\n        let newStatus = e ? TaskStatuses.Completed : TaskStatuses.New\r\n        changeStatus(id, newStatus)\r\n    }, [changeStatus, id] )\r\n\r\n    const onTitleChangeHandler = useCallback ((title: string) => {\r\n        updateTaskTitleHandler(title, id)\r\n    }, [updateTaskTitleHandler, id])\r\n\r\n\r\n    let time = addedDate.slice(11, 16)\r\n    let date = addedDate.slice(0, 10)\r\n    console.log('Task')\r\n\r\n    return <div className={s.taskBlock}>\r\n        <div className={s.task}>\r\n            <CheckBox callback={onChangeHandler} checkedValue={status === TaskStatuses.Completed}/>\r\n            <EditableSpan callback={onTitleChangeHandler} title={title}/>\r\n            <DeleteButton onClick={onClickHandler} disabled={disabled === 'loading'}>x</DeleteButton>\r\n        </div>\r\n        <div className={s.dateTime}>\r\n            <div>{time}</div>\r\n            <div>{date}</div>\r\n        </div>\r\n    </div>\r\n})\r\n\r\nexport default Tasks","import React, {useCallback} from 'react';\r\nimport {FilterValuesType} from '../Main/Main';\r\nimport {AddItemForm} from \"../AddItemForm/AddItemForm\";\r\nimport {EditableSpan} from \"../EditableSpan/EditableSpan\";\r\nimport Task from \"../Task/Task\";\r\nimport {TaskType} from \"../../state/tasksReducer\";\r\nimport {TaskStatuses} from \"../../API/todolistApi\";\r\nimport s from './Todolist.module.css'\r\nimport {DeleteButton} from \"../DeleteButton/DeleteButton\";\r\nimport {RequestStatusType} from \"../../state/app-reducer\";\r\nimport {useAppDispatch} from \"../../state/hooks\";\r\n\r\n\r\ntype PropsType = {\r\n    id: string\r\n    title: string\r\n    tasks: Array<TaskType>\r\n    addedDate: string\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n    changeFilter: (value: FilterValuesType, todolistId: string) => void\r\n    addTask: (title: string, todolistId: string) => void\r\n    changeTaskStatus: (id: string, todolistId: string, status: TaskStatuses) => void\r\n    removeTodolist: (id: string) => void\r\n    filter: FilterValuesType\r\n    updateTodolistTitle: (todolistId: string, title: string) => void\r\n    updateTaskTitle: (todolistId: string, tasksTitle: string, title: string) => void\r\n    entityStatus: RequestStatusType\r\n}\r\n\r\nexport const Todolist = React.memo((props: PropsType) => {\r\n    const {\r\n        id,\r\n        title,\r\n        tasks,\r\n        addedDate,\r\n        removeTask,\r\n        changeFilter,\r\n        addTask,\r\n        changeTaskStatus,\r\n        removeTodolist,\r\n        filter,\r\n        updateTodolistTitle,\r\n        updateTaskTitle,\r\n        entityStatus\r\n    } = props\r\n\r\n    let dispatch = useAppDispatch()\r\n\r\n    // useEffect(() => {\r\n    //     dispatch(setTasksTC(id))\r\n    // }, [])\r\n\r\n    const onAllClickHandler = useCallback(() => changeFilter(\"all\", id), [changeFilter, id])\r\n    const onActiveClickHandler = useCallback(() => changeFilter(\"active\", id), [changeFilter, id])\r\n    const onCompletedClickHandler = useCallback(() => changeFilter(\"completed\", id), [changeFilter, id])\r\n\r\n    const addTaskHandler = useCallback((title: string) => {\r\n        addTask(title, id)\r\n    }, [addTask, id])\r\n\r\n    const updateTodolistTitleHandler = useCallback((title: string) => {\r\n        updateTodolistTitle(id, title)\r\n    }, [updateTodolistTitle, id])\r\n\r\n    const updateTaskTitleHandler = useCallback((title: string, taskId: string) => {\r\n        updateTaskTitle(id, taskId, title)\r\n    }, [updateTaskTitle, id])\r\n\r\n\r\n    const changeStatus = useCallback((taskId: string, status: TaskStatuses) => {\r\n        changeTaskStatus(id, taskId, status)\r\n    }, [changeTaskStatus, id])\r\n\r\n    const deleteTask = useCallback((taskId: string) => removeTask(taskId, id), [removeTask, id])\r\n\r\n    let allTodolistTasks = tasks;\r\n\r\n    if (filter === \"active\") {\r\n        allTodolistTasks = tasks.filter(t => t.status === TaskStatuses.New);\r\n    }\r\n    if (filter === \"completed\") {\r\n        allTodolistTasks = tasks.filter(t => t.status === TaskStatuses.Completed);\r\n    }\r\n\r\n\r\n    return <div className={s.todolist}>\r\n        <h3 style={{display: 'flex', justifyContent: \"space-between\"}}><EditableSpan\r\n            callback={updateTodolistTitleHandler} title={title}/>\r\n            <DeleteButton onClick={() => removeTodolist(id)} disabled={entityStatus === 'loading'}>x</DeleteButton>\r\n        </h3>\r\n        <AddItemForm callBack={addTaskHandler} disabled={entityStatus === 'loading'}/>\r\n\r\n        <ul>\r\n            {\r\n\r\n                allTodolistTasks.map(t => {\r\n\r\n                    // const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n                    //     let newIsDoneValue = e.currentTarget.checked;\r\n                    //     changeTaskStatus(t.id, newIsDoneValue, id);\r\n                    // }\r\n\r\n                    return <li key={t.id} className={t.status > 0 ? \"is-done\" : \"\"}>\r\n                        {/*<CheckBox callback={(e) => onChangeHandler(t.id, e)} checkedValue={t.isDone}/>*/}\r\n                        {/*<EditableSpan callback={(title)=>updateTaskTitleHandler(title, t.id)} title={t.title} />*/}\r\n                        {/*<button onClick={onClickHandler}>x</button>*/}\r\n                        <Task id={t.id}\r\n                              status={t.status}\r\n                              title={t.title}\r\n                              addedDate={t.addedDate}\r\n                              deleteTask={deleteTask}\r\n                              updateTaskTitleHandler={updateTaskTitleHandler}\r\n                              changeStatus={changeStatus}\r\n                              disabled={t.disabled}/>\r\n                    </li>\r\n                })\r\n            }\r\n        </ul>\r\n        <div className={s.filters}>\r\n                <button className={filter === 'all' ? \"active-filter\" : \"filter\"}\r\n                    onClick={onAllClickHandler}>All\r\n            </button>\r\n            <button className={filter === 'active' ? \"active-filter\" : \"filter\"}\r\n                    onClick={onActiveClickHandler}>Active\r\n            </button>\r\n            <button className={filter === 'completed' ? \"active-filter\" : \"filter\"}\r\n                    onClick={onCompletedClickHandler}>Completed\r\n            </button>\r\n        </div>\r\n        <div className={s.date}>\r\n            <span>{addedDate.slice(0, 10)}</span>\r\n        </div>\r\n    </div>\r\n})\r\n\r\n\r\n","import React, {useCallback, useEffect} from 'react';\r\nimport './Main.css';\r\nimport {AddItemForm} from \"../AddItemForm/AddItemForm\";\r\nimport {Todolist} from \"../Todolist/TodoList\";\r\nimport {\r\n    addTodolistTC,\r\n    changeTodolistFilterAC,\r\n    deleteTodolistTC,\r\n    setTodolistTC,\r\n    updateTodolistTC\r\n} from \"../../state/todolists-reducer\";\r\nimport {TaskStatuses} from \"../../API/todolistApi\";\r\nimport {createTaskTC, deleteTaskTC, TaskType, updateTaskTC} from \"../../state/tasksReducer\";\r\nimport {Navigate} from \"react-router-dom\";\r\nimport {useAppDispatch, useAppSelector} from \"../../state/hooks\";\r\n\r\nexport type FilterValuesType = \"all\" | \"active\" | \"completed\";\r\n\r\nexport type     TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\n\r\n\r\nexport const Main = React.memo(() => {\r\n    const todolists = useAppSelector(state => state.todolistsReducer)\r\n    const tasks = useAppSelector(state => state.tasksReducer)\r\n    let isLoggedIn = useAppSelector(state => state.authReducer.isLoggedIn)\r\n    const dispatch = useAppDispatch();\r\n\r\n    useEffect(() => {\r\n        if(!isLoggedIn) {\r\n            return\r\n        }\r\n        dispatch(setTodolistTC())\r\n    }, [])\r\n\r\n    //tasks functions\r\n    const removeTask = useCallback((id: string, todolistId: string) => {\r\n        dispatch(deleteTaskTC(todolistId, id))\r\n    }, [dispatch] )\r\n\r\n    const addTask = useCallback((title: string, todolistId: string) => {\r\n        dispatch(createTaskTC(todolistId, title))\r\n    }, [dispatch])\r\n\r\n    const updateTaskTitle = useCallback((todolistId: string, taskId: string, title: string) => {\r\n        dispatch(updateTaskTC(todolistId, taskId, {title}))\r\n    }, [dispatch] )\r\n\r\n    const changeStatus = useCallback((todolistId: string, taskId: string, status: TaskStatuses) => {\r\n        dispatch(updateTaskTC(todolistId, taskId, {status}))\r\n    }, [dispatch] )\r\n\r\n    //list functions\r\n    const addTodolist = useCallback((title: string) => {\r\n        dispatch(addTodolistTC(title))\r\n    }, [dispatch])\r\n\r\n    const removeTodolist = useCallback((id: string) => {\r\n        dispatch(deleteTodolistTC(id))\r\n    }, [dispatch] )\r\n\r\n    const updateTodolistTitle = useCallback((todolistId: string, title: string) => {\r\n        dispatch(updateTodolistTC(todolistId, title))\r\n    }, [dispatch] )\r\n\r\n    const changeFilter = useCallback((value: FilterValuesType, todolistId: string) => {\r\n        dispatch(changeTodolistFilterAC(todolistId, value))\r\n    }, [dispatch] )\r\n\r\n\r\n    if(!isLoggedIn) {\r\n        return <Navigate to={'/login'} />\r\n    }\r\n\r\n    return (\r\n        <div className='App'>\r\n            <AddItemForm callBack={addTodolist}\r\n                         placeholder={'add list..'}\r\n            />\r\n            <div className=\"todolists\">\r\n                {\r\n                    todolists.map(tl => {\r\n                        let tasksForTodolist = tasks[tl.id];\r\n\r\n\r\n                        return (\r\n                            <div>\r\n                                <Todolist\r\n                                    key={tl.id}\r\n                                    id={tl.id}\r\n                                    title={tl.title}\r\n                                    addedDate={tl.addedDate}\r\n                                    entityStatus={tl.entityStatus}\r\n                                    tasks={tasksForTodolist}\r\n                                    removeTask={removeTask}\r\n                                    changeFilter={changeFilter}\r\n                                    addTask={addTask}\r\n                                    changeTaskStatus={changeStatus}\r\n                                    filter={tl.filter}\r\n                                    removeTodolist={removeTodolist}\r\n                                    updateTodolistTitle={updateTodolistTitle}\r\n                                    updateTaskTitle={updateTaskTitle}\r\n                                />\r\n                            </div>\r\n                        )\r\n                    })\r\n                }\r\n\r\n            </div>\r\n        </div>\r\n    );\r\n})\r\n\r\nexport default Main;\r\n","import * as React from 'react';\r\nimport Stack from '@mui/material/Stack';\r\nimport Snackbar from '@mui/material/Snackbar';\r\nimport MuiAlert, {AlertProps} from '@mui/material/Alert';\r\nimport {setOpen} from \"../../state/app-reducer\";\r\nimport {useAppDispatch, useAppSelector} from \"../../state/hooks\";\r\n\r\nconst Alert = React.forwardRef<HTMLDivElement, AlertProps>(function Alert(\r\n    props,\r\n    ref,\r\n) {\r\n    return <MuiAlert elevation={6} ref={ref} variant=\"filled\" {...props} />;\r\n});\r\n\r\n\r\nexport default function     CustomizedSnackbars() {\r\n    let error = useAppSelector(state=> state.appReducer.error)\r\n    let dispatch = useAppDispatch()\r\n\r\n\r\n    const handleClose = (event?: React.SyntheticEvent | Event, reason?: string) => {\r\n        if (reason === 'clickaway') {\r\n            return;\r\n        }\r\n\r\n        dispatch(setOpen(null));\r\n    };\r\n\r\n    return (\r\n        <Stack spacing={2} sx={{ width: '100%' }}>\r\n\r\n            <Snackbar open={!!error} autoHideDuration={6000} onClose={handleClose}>\r\n                <Alert onClose={handleClose} severity='error' sx={{ width: '100%' }}>\r\n                    {error}\r\n                </Alert>\r\n            </Snackbar>\r\n        </Stack>\r\n    );\r\n}\r\n","import React from 'react'\r\nimport Grid from '@mui/material/Grid';\r\nimport Checkbox from '@mui/material/Checkbox';\r\nimport FormControl from '@mui/material/FormControl';\r\nimport FormControlLabel from '@mui/material/FormControlLabel';\r\nimport FormGroup from '@mui/material/FormGroup';\r\nimport FormLabel from '@mui/material/FormLabel';\r\nimport TextField from '@mui/material/TextField';\r\nimport Button from '@mui/material/Button';\r\nimport {useFormik} from \"formik\";\r\nimport {loginTC} from \"../../state/authReducer\";\r\nimport {Navigate} from 'react-router-dom'\r\nimport {useAppDispatch, useAppSelector} from \"../../state/hooks\";\r\n\r\n\r\ntype FormikErrorType = {\r\n    email?: string\r\n    password?: string\r\n    rememberMe?: boolean\r\n}\r\n\r\n\r\nconst Login = () => {\r\n\r\n    let isLoggedIn = useAppSelector(state => state.authReducer.isLoggedIn)\r\n    const dispatch = useAppDispatch()\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            rememberMe: false\r\n        },\r\n        onSubmit: values => {\r\n            dispatch(loginTC(values))\r\n            formik.resetForm()\r\n        },\r\n        validate: (values) => {\r\n            const errors: FormikErrorType = {}\r\n            if (!values.email) {\r\n                errors.email = 'Required';\r\n            }\r\n            if (!values.password) {\r\n                errors.password = 'Required'\r\n            }\r\n            return errors\r\n        }\r\n    })\r\n\r\n    if(isLoggedIn) {\r\n        return <Navigate to={'/'} />\r\n    }\r\n\r\n    return <Grid container justifyContent={'center'}>\r\n        <Grid item justifyContent={'center'}>\r\n            <form onSubmit={formik.handleSubmit} >\r\n                <FormControl>\r\n                    <FormLabel>\r\n                        <p>To log in get registered\r\n                            <a href={'https://social-network.samuraijs.com/'}\r\n                               target={'_blank'}> here\r\n                            </a>\r\n                        </p>\r\n                        <p>or use common test account credentials:</p>\r\n                        <p>Email: free@samuraijs.com</p>\r\n                        <p>Password: free</p>\r\n                    </FormLabel>\r\n                    <FormGroup>\r\n                        <TextField\r\n                            label=\"Email\"\r\n                            margin=\"normal\"\r\n                            // name='email'\r\n                            // onChange={formik.handleChange}\r\n                            // value={formik.values.email}\r\n                            {...formik.getFieldProps(\"email\")}\r\n                        />\r\n                        {formik.touched.email && formik.errors.email ? <div style={{color: 'red'}}>{formik.errors.email}</div> : null}\r\n\r\n                        <TextField\r\n                            type=\"password\"\r\n                            label=\"Password\"\r\n                            margin=\"normal\"\r\n                            // name='password'\r\n                            // onChange={formik.handleChange}\r\n                            // value={formik.values.password}\r\n                            {...formik.getFieldProps(\"password\")}\r\n                        />\r\n                        {formik.touched.password && formik.errors.password ? <div style={{color: 'red'}}>{formik.errors.password}</div> : null}\r\n\r\n                        <FormControlLabel\r\n                            label={'Remember me'}\r\n                            control={<Checkbox\r\n                                // name='remember me'\r\n                                // onChange={formik.handleChange}\r\n                                // вместо этого можно передать сразу все пропсы\r\n                                {...formik.getFieldProps(\"rememberMe\")}\r\n                                checked={formik.values.rememberMe}/>}\r\n                        />\r\n                        <Button type={'submit'} variant={'contained'} color={'primary'}>\r\n                            Login\r\n                        </Button>\r\n                    </FormGroup>\r\n                </FormControl>\r\n            </form>\r\n        </Grid>\r\n    </Grid>\r\n\r\n};\r\n\r\nexport default Login;","import React, {useEffect} from 'react';\r\nimport Header from \"./components/Header/Header\";\r\nimport Main from \"./components/Main/Main\";\r\nimport s from './App.module.css'\r\nimport {LinearProgress} from \"@material-ui/core\";\r\nimport {isInitializedTC} from \"./state/app-reducer\";\r\nimport CustomizedSnackbars from \"./components/Error/ErrorSnackbar\";\r\nimport { Routes, Route, HashRouter} from \"react-router-dom\";\r\nimport Login from \"./components/Login/Login\";\r\nimport {CircularProgress} from \"@mui/material\";\r\nimport {useAppDispatch, useAppSelector} from \"./state/hooks\";\r\n\r\nconst App = () => {\r\n\r\n    const status = useAppSelector(state => state.appReducer.status)\r\n    const isInitialized = useAppSelector(state => state.appReducer.isInitialized)\r\n    const dispatch = useAppDispatch()\r\n\r\n    useEffect(()=> {\r\n        dispatch(isInitializedTC())\r\n    }, [])\r\n\r\n    if(!isInitialized) {\r\n        return <div style={{width: '100%', textAlign: 'center', position: 'fixed', top: '40%'}}>\r\n            <CircularProgress />\r\n        </div>\r\n    }\r\n\r\n    return (\r\n        <HashRouter>\r\n            <div>\r\n                <Header/>\r\n                {status === 'loading' && <LinearProgress color=\"secondary\"/>}\r\n\r\n                <div className={s.wrap}>\r\n                    <Routes>\r\n\r\n                        <Route path={'/'} element={<Main/>}/>\r\n                        <Route path={'/login'} element={<Login/>}/>\r\n                    </Routes>\r\n                </div>\r\n\r\n                <CustomizedSnackbars/>\r\n            </div>\r\n        </HashRouter>\r\n    );\r\n}\r\nexport default App;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport {Provider} from \"react-redux\";\r\nimport {store} from \"./state/store\";\r\nimport App from \"./App\";\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <App/>\r\n    </Provider>, document.getElementById('root'));\r\n\r\n\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();","// extracted by mini-css-extract-plugin\nmodule.exports = {\"taskBlock\":\"Task_taskBlock__32rOo\",\"task\":\"Task_task__3aUTm\",\"dateTime\":\"Task_dateTime__3xuP2\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"todolist\":\"Todolist_todolist__2NJ0z\",\"filters\":\"Todolist_filters__3l8wS\",\"date\":\"Todolist_date__vJvPF\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__uxT4o\",\"header_content\":\"Header_header_content__6QJIJ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"span\":\"EditableSpan_span__3fNEs\"};"],"sourceRoot":""}